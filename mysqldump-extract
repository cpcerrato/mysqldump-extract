#!/bin/bash

# mysqldump-extract: take file generated by command mysqldump and extract
# database or table from database.

# Copyright (C) May, 2014 Carlos Perez Cerrato <cperezcerrato@gmail.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Functions 

function usage(){
cat << EOF
${0##*/} extract databases and tables from file generated by mysqldump.
Usage: ${0##*/} -d -f FILE [-h] [-t TABLE] -o OUTFILE
   -h      Display this message.
   -d      Database.
   -f      File to extract.
   -t      Table.
   -o      Destination file.\

EOF
}


function get_args(){
    while getopts "hd:f:t:o:" opt; do
        case "$opt" in
            d)
              DATABASE="$OPTARG"
              ;;
            f)
              INPUTFILE="$OPTARG"
              ;;
            t)
              TABLE="$OPTARG"
              ;;
            o)
              OUTFILE="$OPTARG"
              ;;
            h|*)
              usage
              exit
              ;;
        esac
    done
}


function check_args(){
    if [[ -z "$DATABASE" ]] || [[ -z "$INPUTFILE" ]] || [[ -z "$OUTFILE" ]]
    then
        echo -e "\nError: Database, input file or output file not set.\n"
        usage
        exit 
    fi
}


function extract_database(){
    local FIND=0
    PRINT=0
    while read line
    do
        if [[ $FIND -eq 1 ]] && [[ $line =~ ^CREATE\ DATABASE.* ]]
        then
            PRINT=2      
            break
        fi
    
        if [[ $line =~ ^CREATE\ DATABASE.*\`$DATABASE\`.*\;  ]]
        then
            PRINT=1
            FIND=1
            echo "$line"
            continue
        fi
    
        if [[ $FIND -eq 1 ]] && [[ $PRINT = 1 ]]
        then
            echo "$line"
        fi
    
    done < $INPUTFILE > $OUTFILE
}


function extract_table(){
    local FIND=0
    PRINT=0
    while read line
    do
        if [[ $PRINT -eq 1 ]] 
        then
            if [[ $line =~ ^CREATE\ DATABASE.* ]] || [[ $line =~ ^CREATE\ TABLE ]] || [[ $line =~ ^DROP\ TABLE ]]
            then
                PRINT=2
                break
            fi
        fi
    
        if [[ $line =~ ^CREATE\ DATABASE.*\`$DATABASE\`.*\;  ]]
        then
            FIND=1
            continue
        fi
  
        if [[ $FIND -eq 1 ]] && [[ $line =~ ^CREATE\ TABLE\ \`$TABLE\`  ]]
        then 
            PRINT=1
        fi

        if [[ $FIND -eq 1 ]] && [[ $PRINT = 1 ]]
        then
            echo "$line"
        fi
    
    done < $INPUTFILE > $OUTFILE
}


function main(){
    get_args "$@"
    check_args
    if [ -n "$TABLE" ]
    then
        extract_table
        if [ $PRINT -ne 2 ]
        then
            echo -e "Database or table not found in $INPUTFILE."
            exit
        fi
    else
        extract_database
        if [ $PRINT -ne 2 ]
        then
            echo -e "Database not found in $INPUTFILE."
            exit
        fi
    fi

}

main "$@"
